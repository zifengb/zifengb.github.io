(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{585:function(t,e,v){"use strict";v.r(e);var a=v(17),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"中文乱码之填坑java-web"}},[t._v("中文乱码之填坑Java web")]),t._v(" "),v("h3",{attrs:{id:"导言"}},[t._v("导言")]),t._v(" "),v("blockquote",[v("p",[t._v("在java web项目中，中文乱码问题屡见不鲜，继N+1次后的踩坑，我终于舍得做出了这次总结，请容许我默默擦干眼泪再娓娓道来~")])]),t._v(" "),v("h2",{attrs:{id:"常见的编码格式"}},[t._v("常见的编码格式")]),t._v(" "),v("p",[v("strong",[t._v("first，第一个问题，为什么要有编码各种这种东西？")])]),t._v(" "),v("blockquote",[v("p",[t._v("答：其实根本原因就是计算机不能理解我们人类的自然语言。所以为了让计算机能够理解人类的语言，并且以人类能够理解的符号表示出来——这样子，编码就诞生了！除了，计算机和人类的交流以外，不同地方的人们语言也并不完全一致，因此交流是存在多大的障碍啊~")])]),t._v(" "),v("p",[t._v("总结下编码的的原因如下：")]),t._v(" "),v("ul",[v("li",[t._v("计算机是以二进制的形式存储信息的，其最小存储单元为1个字节("),v("code",[t._v("byte")]),t._v(")，即8个bit，所以能够表示的字符范围为0~255个")]),t._v(" "),v("li",[t._v("人类要表示的符号太多，无法用1个字节完全表示，因此新的数据结构"),v("code",[t._v("char")]),t._v("出现了，而"),v("code",[t._v("char")]),t._v("到"),v("code",[t._v("byte")]),t._v("必须编码!!!")])]),t._v(" "),v("p",[t._v("各种语言需要交流，就必须经过翻译，而编码格式就是定义了计算机和人类语言的翻译方式，他们根据不同的编码格式按照不同的规则进行"),v("strong",[t._v("转化")]),t._v("(类似翻译的过程)，常见的编码格式有："),v("code",[t._v("ASII")]),t._v("、"),v("code",[t._v("ISO-8859-1")]),t._v("、"),v("code",[t._v("GB2312")]),t._v("、"),v("code",[t._v("GBK")]),t._v("、"),v("code",[t._v("UTF-8")]),t._v("、"),v("code",[t._v("UTF-16")]),t._v("等。")]),t._v(" "),v("hr"),t._v(" "),v("p",[v("strong",[t._v("接着，我会详细的介绍常见的编码格式：")])]),t._v(" "),v("h3",{attrs:{id:"ascii码"}},[t._v("ASCII码")]),t._v(" "),v("blockquote",[v("p",[t._v("ASCII是“美国信息交换标准编码”的英文字头缩写，可称之为“美标”。美标规定了用从0到127的128个数字来代表信息的规范编码，用1个字节的低7位(即除了第一个bit位)表示，"),v("code",[t._v("0~31")]),t._v("是控制字符如"),v("code",[t._v("换行")]),t._v("、"),v("code",[t._v("回车")]),t._v("、"),v("code",[t._v("删除")]),t._v("等，"),v("code",[t._v("32~126")]),t._v("是打印字符，可以通过键盘输入并且能够显示出来。")])]),t._v(" "),v("p",[t._v("显然ASCII只能表示128个字符，明显是不够用的，所以ISO组织又制订了新的编码标准……")]),t._v(" "),v("h3",{attrs:{id:"iso-8859-1"}},[t._v("ISO-8859-1")]),t._v(" "),v("blockquote",[v("p",[t._v("ISO组织为了扩展ASCII码，执行了一系列新的标准，它们就是ISO-8859-1至ISO-8859-15，其中ISO-8859-1涵盖了大多数西欧国家的语言字符，所以应用最广泛。但是ISO-8859-1仍然是单字节编码，它总共能够表示256个字符。(其实本质就是启用了ASCII码的第一个bit)")])]),t._v(" "),v("p",[t._v("但是啊，ISO组织的制定的一系列标准虽然已经能够表示大多数西欧国家的语言字符，然而儿~他们明显没想到中文的博大精深……所以计算机遇到中文毫无疑问是gg的，呵呵~")]),t._v(" "),v("h3",{attrs:{id:"gb2312"}},[t._v("GB2312")]),t._v(" "),v("blockquote",[v("p",[t._v("GB2312的全称是《信息交换用汉字编码字符集》，由中国国家标准总局1980年发布。它是双字节编码，总编码范围是"),v("code",[t._v("A1~F7")]),t._v("，其中"),v("code",[t._v("A1~A9")]),t._v("是符号区，总共包含682个符号；"),v("code",[t._v("B0~F7")]),t._v("是汉字区，包含6763个汉字。GB2312编码适用于汉字处理、汉字通信等系统之间的信息交换，通行于中国大陆；新加坡等地也采用此编码。中国大陆几乎所有的中文系统和国际化的软件都支持GB2312")])]),t._v(" "),v("h3",{attrs:{id:"gbk"}},[t._v("GBK")]),t._v(" "),v("blockquote",[v("p",[t._v("GBK全称《汉字内码扩展规范》（GBK即“国标”、“扩展”汉语拼音的第一个字母，英文名称：Chinese Internal Code Specification） ，中华人民共和国全国信息技术标准化技术委员会1995年12月1日制订。它的出现是为了扩展GB2312，并加入更多的汉字。它的编码范围是"),v("code",[t._v("8140~FEFE")]),t._v("(去掉XX7F)，总共23940个码位，它能够表示21003个汉字，它的编码是和GB2312兼容的，也就是说GB2312编码的汉字可以用GBK解码，并且不会有乱码")])]),t._v(" "),v("h3",{attrs:{id:"gb18030"}},[t._v("GB18030")]),t._v(" "),v("blockquote",[v("p",[t._v("国家标准GB18030《信息技术 中文编码字符集》是我国继GB2312和GB13000.1之后最重要的汉字编码标准，是我国计算机系统必须遵循的基础性标准之一.它可能是单字节、双字节或者四字节编码，与GB2312兼容，但在实际应用系统中使用得并不广泛")])]),t._v(" "),v("h3",{attrs:{id:"unicode"}},[t._v("Unicode")]),t._v(" "),v("blockquote",[v("p",[t._v("Unicode(Universal Code 统一码)，ISO试图创建一个全新的超语言字典，世界上的所有语言都可以通过这个字典来相互翻译。而Unicode又是Java和XML的基础")])]),t._v(" "),v("h3",{attrs:{id:"utf-16"}},[t._v("UTF-16")]),t._v(" "),v("blockquote",[v("p",[t._v("UTF-16具体定义了Unicode字符在计算机的存储方法。UTF-16是用2个字节来表示Unicode的转化格式，它采用"),v("strong",[t._v("定长")]),t._v("的表示方法，即不论什么字符都用2个字节来表示。2个字节是16个bit，所以叫UTF-16。UTF-16表示字符非常方便，这就大大简化了字符串的操作，这也是Java以UTF-16作为内存的字符串存储格式的很重要的原因")])]),t._v(" "),v("h3",{attrs:{id:"utf-8"}},[t._v("UTF-8")]),t._v(" "),v("blockquote",[v("p",[t._v("UTF-16虽然表示上非常简单，但是有很多字符用1个字节就可以表达了，而UTF-16采用定长的方式，即1个字节可以表示的字符也用2个字节表示，导致存储空间放大了一倍，在网络带宽有限的条件下，会增大网络传输的流量。因此UTF-8采用了"),v("strong",[t._v("变长")]),t._v("字节技术，弥补了其缺陷，UTF-8的编码字符可以由1~6个字节组成。")])]),t._v(" "),v("h5",{attrs:{id:"utf-8编码规则如下"}},[t._v("UTF-8编码规则如下：")]),t._v(" "),v("blockquote",[v("ol",[v("li",[t._v("如果是1个字节，最高位(第8位)为0，则表示这是1个ASCII字符(00~7F)，可见所有的ASCII编码已经是UTF-8了")]),t._v(" "),v("li",[t._v("如果是1个字节，以"),v("code",[t._v("11")]),t._v("开头，则连续的11个数暗示这个字符的字节数，例如"),v("code",[t._v("110XXXXX")]),t._v("代表它是双字节的UTF-8字符的首字节")]),t._v(" "),v("li",[t._v("如果是1个字节，以"),v("code",[t._v("10")]),t._v("开始，表示它不是首字节，则需要向前查找才能够得到当前字符的首字节")])])]),t._v(" "),v("p",[t._v("嗯嗯，花了一大堆的时间去解释各种的编码格式，这些也许看起来很乏味，而且晦涩难懂不易记忆，但是这恰恰是底层的原理实现。不过，你如果只是为了寻找java web中文的乱码的解决方案的话，可以略过，想深入了解的童鞋，欢迎详读~[耶]")]),t._v(" "),v("h2",{attrs:{id:"大大的栗子"}},[t._v("大大的栗子")]),t._v(" "),v("blockquote",[v("p",[t._v("用于说明个各编码的转换，以及为下文做铺垫~")])]),t._v(" "),v("p",[t._v("ISO-8859-1编码")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdn.net/20161123135616208",alt:"这里写图片描述"}})]),t._v(" "),v("p",[t._v("GB2312编码")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdn.net/20161123135715382",alt:"这里写图片描述"}})]),t._v(" "),v("p",[t._v("GBK编码")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdn.net/20161123135750855",alt:"这里写图片描述"}})]),t._v(" "),v("p",[t._v("UTF-16编码")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdn.net/20161123135819433",alt:"这里写图片描述"}})]),t._v(" "),v("p",[t._v("UTF-8编码")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdn.net/20161123135856465",alt:"这里写图片描述"}})]),t._v(" "),v("ul",[v("li",[t._v("[x] deng...deng~ 下面进入这篇文章的主题")])]),t._v(" "),v("h2",{attrs:{id:"中文乱码-java-web中如何填坑"}},[t._v("中文乱码？Java web中如何填坑？")]),t._v(" "),v("blockquote",[v("p",[t._v("数据经过网络传输都是以字节为单位的，所以所有数据都必须被序列化为字节。")])]),t._v(" "),v("ul",[v("li",[t._v("[ ] 一次HTTP请求的编码示例图")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdn.net/20161123134338239",alt:"这里写图片描述"}})]),t._v(" "),v("h3",{attrs:{id:"url的编解码"}},[t._v("URL的编解码")]),t._v(" "),v("p",[t._v("举个栗子，例如以下URL：")]),t._v(" "),v("p",[v("code",[t._v("http://localhost:8080/examples/servlets/servlet/君山?author=君山")])]),t._v(" "),v("p",[t._v("图示：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdn.net/20161123134419942",alt:"这里写图片描述"}})]),t._v(" "),v("p",[t._v("URL说明：")]),t._v(" "),v("ul",[v("li",[t._v("Port对应Tomcat的"),v("strong",[t._v("server.xml")]),t._v("文件的"),v("code",[t._v('<Connector port="8080" />')]),t._v("中的配置")]),t._v(" "),v("li",[t._v("Context Path对应Tomcat的"),v("strong",[t._v("context.xml")]),t._v("文件的"),v("code",[t._v('<Context path="/examples/">')]),t._v("中的配置")]),t._v(" "),v("li",[t._v("Servlet Path 在对应的web项目下的"),v("strong",[t._v("web.xml")]),t._v("文件的"),v("code",[t._v("<url-pattern>")]),t._v("中配置")]),t._v(" "),v("li",[t._v("PathInfo 是我们请求的具体Servlet")]),t._v(" "),v("li",[t._v("QueryString 是要传递的参数")])]),t._v(" "),v("p",[t._v("？？？那么上面的http请求中PathInfo和QueryString部分出现了中文，当这个URL在网络传输的时候会怎么编码和解析呢")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"title"}),v("p",[t._v("chrome 54.0结果如下："),v("br"),t._v("\nRequest URL:http://localhost:8080/examples/servlets/servlet/%E5%90%9B%E5%B1%B1?author=%E5%90%9B%E5%B1%B1")])]),v("blockquote",[v("ul",[v("li",[t._v("PathInfo的“君山”编码为E5 90 9B E5 B1 B1")]),t._v(" "),v("li",[t._v("QueryString的“君山”编码为E5 90 9B E5 B1 B1")])])]),t._v(" "),v("p",[t._v("由上面可以知道，这两处的中文编码格式一样(不同浏览器结果不一定相同)，至于为什么会有"),v("code",[t._v("%")]),t._v("？这是由于"),v("strong",[t._v("RFC3986编码规范")]),t._v("定义的，浏览器编码URL是将非ASCII字符按照某种编码格式编码成16进制的数字后将每个16进制表示的字节前面加上"),v("code",[t._v("%")]),t._v("！**而且不同浏览器对PathInfo的编码也可能不一样……**呵呵，是不是有种gg的感觉？")]),t._v(" "),v("p",[t._v("下面我们以Tomcat为例，讲解服务端是如何对客户端(浏览器端)传送过来的URL进行解析的")]),t._v(" "),v("ul",[v("li",[t._v("PathInfo解析")])]),t._v(" "),v("blockquote",[v("p",[t._v("这部分解析较简单，进行解码的编码格式是在"),v("code",[t._v('<Connector port="8080" URIEncoding="UTF-8" />')]),t._v("中定义的，如前面定义的解码方式是UTF-8，如果没有定义则以服务器自身默认的编码进行解码，Tomcat默认的编码是***ISO-8859-1***")])]),t._v(" "),v("ul",[v("li",[t._v("QueryString解析")])]),t._v(" "),v("blockquote",[v("p",[t._v("GET方式：QueryString的解码方式要么是ContentType定义的Charset，要么使用服务器默认编码，Tomcat默认的编码是***ISO-8859-1***。如果要使用ContentType定义的Charset，就要在Tomcat设置"),v("code",[t._v('<Connector port="8080" useBodyCharacterEncoding="true" />')])])]),t._v(" "),v("h3",{attrs:{id:"http-header的编解码"}},[t._v("HTTP Header的编解码")]),t._v(" "),v("blockquote",[v("p",[t._v("当客户端(浏览器端)发起一个http请求时，除了URL外，Header中传递的其他的参数也可能会存在解码问题，例如Cookie，redirectPath等，这些参数的解码是在调用request.getHeader时进行的。如果请求的Header没有解码则使用服务器自身默认的编码进行解码，Tomcat默认的编码是***ISO-8859-1***，所以要在Header传递非ASCII字符时，先用"),v("code",[t._v("org.apache.catalina.util.URLEncoder")]),t._v("编码，之后再用相应的编码格式解码即可。")])]),t._v(" "),v("h3",{attrs:{id:"psot表单编解码"}},[t._v("PSOT表单编解码")]),t._v(" "),v("blockquote",[v("p",[t._v("首先，POST表单提交的参数传递方式与QueryString不同，它是通过http的body传递到服务器端的。在提交表单时，POST传递的参数客户端会按照ContentType的Charset编码格式进行编码，服务器端进行解码时也是按照ContentType的Charset编码格式进行解码(前提是设置了"),v("code",[t._v('useBodyCharacterEncoding="true"')]),t._v(")，所以一般不会出现问题，另外这个解码格式我们可以自己设置"),v("code",[t._v("request.setCharacterEncoding(charset)")]),t._v("——不过谨记的一点是要在"),v("code",[t._v("request.getParameter")]),t._v("调用之前设置")])]),t._v(" "),v("h3",{attrs:{id:"http-body的编解码"}},[t._v("HTTP BODY的编解码")]),t._v(" "),v("blockquote",[v("p",[t._v("用户请求的资源成功获取后，这些内容将通过Response返回客户端(浏览器)。这个过程要先经过编码，再到浏览器进行解码。编解码的编码格式可以通过"),v("code",[t._v("response.setCharacterEncoding(charset)")]),t._v("来设置，并且通过Header的Content-Type返回客户端，浏览器接收到返回的Socket流时将通过Content-Type的charset来解码。如果Content-Type没有定义，则通过HTML的"),v("code",[t._v('<meta http-equiv="content-type" content="text/html;charset=utf-8">')]),t._v("中的charset来解码")])]),t._v(" "),v("p",[t._v("注意：")]),t._v(" "),v("blockquote",[v("p",[t._v("访问数据库时都是通过客户端的JDBC驱动来完成的，用JDBC来存取数据时也要和数据库内置编码保持一致，可以通过设置JDBC URL来指定，如"),v("code",[t._v('MySQL:url="jdbc:mysql://localhost:3306/DB?useUnicode=true&characterEncoding=utf-8"')])])]),t._v(" "),v("h3",{attrs:{id:"在js中的编解码"}},[t._v("在JS中的编解码")]),t._v(" "),v("div",{staticClass:"language-html line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-html"}},[v("code",[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("head")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),v("span",{pre:!0,attrs:{class:"token attr-value"}},[v("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("statics/javascript/script.js"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),v("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("charset")]),v("span",{pre:!0,attrs:{class:"token attr-value"}},[v("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("GBK"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),v("span",{pre:!0,attrs:{class:"token script"}}),v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("head")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br")])]),v("p",[t._v("script.js如下：")]),t._v(" "),v("div",{staticClass:"language-javascript line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-javascript"}},[v("code",[t._v("document"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"这是中文"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndocument"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"testid"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"这是中文"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br")])]),v("p",[t._v("如果外部引用的script.js编码格式与当前页面的不一致，也会发生中文乱码问题！！！此时可以在引用外部js文件的标签里设置解码格式charset。避免中文的乱码")]),t._v(" "),v("h3",{attrs:{id:"js的url编码"}},[t._v("JS的URL编码")]),t._v(" "),v("p",[t._v("当js使用ajax方式向服务器端发送请求时，URL的默认编码也是受客户端(浏览器端)影响的。js的URL编码问题，掌握以下三个函数即可：")]),t._v(" "),v("ol",[v("li",[t._v("escape()")])]),t._v(" "),v("blockquote",[v("p",[t._v("这个函数是将ASCII字母、数字、标点符号(*+-./@_)之外的其他字符转化为Unicode编码值，并且在编码前加上"),v("code",[t._v("%u")]),t._v("，解码用"),v("code",[t._v("unescape()")]),t._v("。不过这对函数在ES v3标准中删除了，用"),v("code",[t._v("encodeURI()")]),t._v("和"),v("code",[t._v("encodeURLComponent()")]),t._v("代替")])]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[t._v("encodeURI()")])]),t._v(" "),v("blockquote",[v("p",[t._v("与escape()不同，该函数对整个URL的字符进行UTF-8编码(一些特殊字符除外，例如"),v("code",[t._v("！，#，$，&，'，()，*，+...0-9，A-z")]),t._v(")，并且在每个码值之前面加上"),v("code",[t._v("%")]),t._v("，解码使用"),v("code",[t._v("decodeURI()")])])]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[t._v("encodeURIComponent()")])]),t._v(" "),v("blockquote",[v("p",[t._v("与encodeURI()相比，该函数彻底，除了("),v("code",[t._v("！，'，()，*，+，-，.，_，~，0-9，A-z")]),t._v(")以外的所有字符均进行UTF-8编码，并且在每个码值之前面加上"),v("code",[t._v("%")]),t._v("，解码使用"),v("code",[t._v("decodeURIComponent()")])])]),t._v(" "),v("h3",{attrs:{id:"java与js编解码"}},[t._v("Java与JS编解码")]),t._v(" "),v("blockquote",[v("ol",[v("li",[v("code",[t._v("java.net.URLEncoder")]),t._v("对应"),v("code",[t._v("encodeURIComponent")])]),t._v(" "),v("li",[v("code",[t._v("java.net.URLDecoder")]),t._v("对应"),v("code",[t._v("decodeURIComponent")])]),t._v(" "),v("li",[t._v("前端使用encodeURLComponent编码后，服务端使用URLDecoder解码可能会出现乱码问题，这一定是两端使用的编码格式不一致造成的。JS默认是UTF-8编码，而Java中文解码一般是GBK或者GB2312。解决方法如下：\n前端使用"),v("code",[t._v("encodeURIComponent(encodeURIComponent(str))")]),t._v("，服务端使用"),v("code",[t._v("request.getParameter")]),t._v("用GBK解码即可获得UTF-8编码的字符串，如果Java端需要使用这个字符串，则在用UTF-8再解码一次。")])])]),t._v(" "),v("h3",{attrs:{id:"其他需要编码的地方"}},[t._v("其他需要编码的地方")]),t._v(" "),v("p",[t._v("xml:")]),t._v(" "),v("p",[v("code",[t._v('<?xml version="1.0" encoding="UTF-8">')])]),t._v(" "),v("p",[t._v("jsp:")]),t._v(" "),v("p",[v("code",[t._v('<%@page contentType="text/html" pageEncoding="UTF-8" %>')])])])}),[],!1,null,null,null);e.default=s.exports}}]);